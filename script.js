// script.js

document.addEventListener('DOMContentLoaded', () => {
    // Navbar toggle for mobile
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');

    hamburger.addEventListener('click', () => {
        navMenu.classList.toggle('active');
    });

    // Simple form submission
    const contactForm = document.getElementById('contactForm');
    const affiliateForm = document.getElementById('affiliateForm');

    contactForm.addEventListener('submit', (e) => {
        e.preventDefault();
        alert('Thank you for contacting us! We will get back to you soon.');
        contactForm.reset();
    });

    affiliateForm.addEventListener('submit', (e) => {
        e.preventDefault();
        alert('Welcome to the Affiliate Program!');
        affiliateForm.reset();
    });

    // Enhanced AI Image Generator with real free models
    const generateBtn = document.getElementById('generate-btn');
    const imageOutput = document.getElementById('image-output');
    const imageActions = document.querySelector('.image-actions');
    const promptInput = document.getElementById('prompt-input');
    const styleSelect = document.getElementById('style-select');
    const sizeSelect = document.getElementById('size-select');
    
    let currentImageBlob = null;
    let currentImageUrl = null;
    let aiGenerator = null;

    // Initialize the AI generator
    if (window.AIImageGenerator) {
        aiGenerator = new AIImageGenerator();
    }

    async function generateImage() {
        const prompt = promptInput.value.trim();
        const style = styleSelect.value;
        const size = sizeSelect.value;

        if (!prompt) {
            alert('Please enter a description for your image!');
            return;
        }

        // Show loading state
        generateBtn.disabled = true;
        generateBtn.textContent = 'Generating...';
        imageOutput.innerHTML = `
            <div class="loading-spinner">
                <i class="fas fa-spinner fa-spin"></i>
                <p>Creating your image...</p>
                <small>This may take 10-30 seconds...</small>
            </div>
        `;

        try {
            let result;
            
            if (aiGenerator) {
                // Use enhanced AI generator
                result = await aiGenerator.generateImage(prompt, style, size);
            } else {
                // Fallback to simple implementation
                result = await fallbackGeneration(prompt, style, size);
            }

            if (result && result.imageUrl) {
                currentImageUrl = result.imageUrl;
                currentImageBlob = result.blob || null;
                
                imageOutput.innerHTML = `
                    <div class="generated-image-container">
                        <img src="${result.imageUrl}" alt="Generated Image" style="max-width: 100%; height: auto; border-radius: 8px;">
                        <div class="image-info">
                            <small>Generated by: ${result.service || 'AI Service'}</small>
                            ${result.isFallback ? '<small class="fallback-notice">ðŸ“¸ Curated image (AI generation temporarily unavailable)</small>' : ''}
                        </div>
                    </div>
                `;
                imageActions.style.display = 'flex';
            } else {
                throw new Error('Image generation failed');
            }

        } catch (error) {
            console.error('Image generation failed:', error);
            imageOutput.innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>Sorry, image generation is temporarily unavailable.</p>
                    <small>Our AI services are busy right now. Please try again in a moment.</small>
                    <br><br>
                    <small><strong>Tips:</strong> Try a simpler description or different style</small>
                </div>
            `;
        } finally {
            generateBtn.disabled = false;
            generateBtn.textContent = 'Generate Image';
        }
    }

    // Fallback generation function
    async function fallbackGeneration(prompt, style, size) {
        try {
            // Try Pollinations AI first (most reliable)
            const pollinationsPrompt = encodeURIComponent(prompt + (style !== 'realistic' ? ` ${style} style` : ''));
            const dimensions = size.split('x');
            const imageUrl = `https://image.pollinations.ai/prompt/${pollinationsPrompt}?width=${dimensions[0]}&height=${dimensions[1]}&nologo=true&private=true`;
            
            // Test if image loads
            await testImageLoad(imageUrl);
            return {
                imageUrl: imageUrl,
                service: 'Pollinations AI',
                type: 'url'
            };
        } catch (error) {
            console.log('Pollinations failed, trying fallback...');
            
            // Final fallback to curated images
            const keywords = extractKeywords(prompt);
            const fallbackUrl = `https://source.unsplash.com/800x600/?${keywords}`;
            
            await testImageLoad(fallbackUrl);
            return {
                imageUrl: fallbackUrl,
                service: 'Unsplash',
                type: 'url',
                isFallback: true
            };
        }
    }

    // Helper function to extract keywords
    function extractKeywords(prompt) {
        const commonWords = ['a', 'an', 'the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by'];
        const words = prompt.toLowerCase()
            .replace(/[^\w\s]/g, '')
            .split(/\s+/)
            .filter(word => word.length > 2 && !commonWords.includes(word))
            .slice(0, 3);
        return words.join(',') || 'nature,landscape,art';
    }

    // Helper function to test if image loads
    function testImageLoad(url) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.onload = () => resolve(url);
            img.onerror = () => reject(new Error('Image failed to load'));
            img.src = url;
            
            // Timeout after 10 seconds
            setTimeout(() => {
                reject(new Error('Image load timeout'));
            }, 10000);
        });
    }

    // Download functionality
    function downloadImage() {
        if (!currentImageUrl) {
            alert('No image to download!');
            return;
        }

        const link = document.createElement('a');
        link.href = currentImageUrl;
        link.download = `bubbleroot-ai-${Date.now()}.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    // Regenerate functionality
    function regenerateImage() {
        if (currentImageUrl && currentImageUrl.startsWith('blob:')) {
            URL.revokeObjectURL(currentImageUrl);
        }
        currentImageUrl = null;
        currentImageBlob = null;
        imageActions.style.display = 'none';
        generateImage();
    }

    // Cancel generation
    function cancelGeneration() {
        if (aiGenerator) {
            aiGenerator.cancelCurrentGeneration();
        }
        generateBtn.disabled = false;
        generateBtn.textContent = 'Generate Image';
        imageOutput.innerHTML = `
            <div class="image-placeholder">
                <i class="fas fa-image"></i>
                <p>Generation cancelled. Enter a new prompt to try again.</p>
            </div>
        `;
    }

    // Event listeners
    generateBtn.addEventListener('click', generateImage);
    
    const downloadBtn = document.getElementById('download-btn');
    const regenerateBtn = document.getElementById('regenerate-btn');
    
    downloadBtn.addEventListener('click', downloadImage);
    regenerateBtn.addEventListener('click', regenerateImage);

    // Enter key support for prompt input
    promptInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            generateImage();
        }
    });

    // Sample prompts for inspiration
    const samplePrompts = [
        'A majestic mountain landscape at sunset',
        'A futuristic city with flying cars',
        'A cute robot drinking coffee',
        'Abstract geometric patterns in bright colors',
        'A serene forest with morning mist',
        'A vintage car on a desert road',
        'A magical fairy tale castle',
        'A space station orbiting Earth',
        'A beautiful garden with colorful flowers',
        'A cozy cabin in the woods',
        'A modern office building at night',
        'A peaceful lake with mountains in the background'
    ];

    // Add sample prompt button
    const sampleBtn = document.createElement('button');
    sampleBtn.textContent = 'Try Sample Prompt';
    sampleBtn.className = 'btn btn-outline';
    sampleBtn.style.marginTop = '10px';
    sampleBtn.addEventListener('click', () => {
        const randomPrompt = samplePrompts[Math.floor(Math.random() * samplePrompts.length)];
        promptInput.value = randomPrompt;
    });
    
    // Insert sample button after the generate button
    generateBtn.parentNode.insertBefore(sampleBtn, generateBtn.nextSibling);

    // Add cancel button during generation
    const cancelBtn = document.createElement('button');
    cancelBtn.textContent = 'Cancel';
    cancelBtn.className = 'btn btn-outline';
    cancelBtn.style.marginTop = '10px';
    cancelBtn.style.display = 'none';
    cancelBtn.addEventListener('click', cancelGeneration);
    
    // Insert cancel button after sample button
    sampleBtn.parentNode.insertBefore(cancelBtn, sampleBtn.nextSibling);

    // Show/hide cancel button based on generation state
    const originalGenerateClick = generateBtn.addEventListener;
    generateBtn.addEventListener('click', () => {
        cancelBtn.style.display = 'inline-block';
        sampleBtn.style.display = 'none';
    });

    // Hide cancel button when generation completes
    const hideButtons = () => {
        cancelBtn.style.display = 'none';
        sampleBtn.style.display = 'inline-block';
    };

    // Override the generate function to handle button states
    const originalGenerate = generateImage;
    generateImage = async function() {
        try {
            await originalGenerate();
        } finally {
            hideButtons();
        }
    };
});
